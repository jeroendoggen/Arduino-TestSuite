{"name":"Arduino TestSuite","note":"Don't delete this file! It's used internally to help with page regeneration.","body":"Arduino TestSuite\r\n=================\r\n\r\nPython Script to automate Arduino Unit Tests\r\n--------------------------------------------\r\nThis Python scripts allows automated running of several Arduino unit tests.\r\nThe testing process is started on the PC but the tests run on the actual Arduino hardware.\r\nOne set of unit tests is typically used to test one Arduino library.\r\n\r\nThe following steps are performed for each set of unit tests:\r\n 1. The scipts compiles and uploads a sketch that contains the unit testing code to the Arduino board.\r\n 2. The unit test are run on the Arduino board.\r\n 3. The results of the test are printed over the serial port and analyzed by this Python scripts\r\n 4. The script start the next test. Steps 1,2 and 3 are repeated for all the libraries that you are using in the project.\r\n  The script prints a summary showing an overview of the failed/passed test in the complete testsuite.\r\n\r\nInstallation:\r\n-------------\r\n * Downloads source and run \"python setup.py install\"\r\n * Python Package available in the Python Package Index at: http://pypi.python.org/pypi/ArduinoTestSuite/ (\"pip install ArduinoTestSuite\")\r\n * Currently only tested on Linux (subprocess handling only works on Linux)\r\n\r\nUsage:\r\n------\r\n * Start the program with: \"python -m ArduinoTestSuite\" (or python main.py)\r\n * Select the tests you want to run by editing: \"planned-tests.conf\"\r\n * Other configuration options: \"python -m ArduinoTestSuite --help\"\r\n\r\nReferences\r\n----------\r\n * The unit tests are written with the \"Arduino Unit Testing Library\": http://code.google.com/p/arduinounit\r\n * The tests also use \"Arduino Unit Testing Helper Library\": http://code.google.com/p/arduino-unit-test-helper-library\r\n * The code is uploaded to the Arduino board with \"Arscons: scons script for Arduino\": http://github.com/suapapa/arscons\r\n\r\nTypical Output:\r\n---------------\r\nIn this examples, two Arduino libraries are tested, one passes, one fails.\r\n\r\n````\r\n=============================================================\r\nPlanned tests:\r\n-------------------------------------------------------------\r\n 1. DistanceSensor/examples/GP2Y0A21YK/TestSuite/\r\n 2. My_Module/examples/TestSuite/\r\n\r\nProgram flow:\r\n 1. Compile TestSuite sketch\r\n 2. Upload sketch using Arscons\r\n 3. Check unit test output\r\n\r\n=============================================================\r\nStarting test: DistanceSensor/examples/GP2Y0A21YK/TestSuite/\r\n-------------------------------------------------------------\r\nCompiling & uploading sketch to Arduino...\r\nUpload succesfull\r\nRunning test suite...\r\nTests run: 3 Successful: 3 Failed: 0\r\n\r\n=============================================================\r\nStarting test: My_Module/examples/TestSuite/\r\n-------------------------------------------------------------\r\nCompiling & uploading sketch to Arduino...\r\nUpload succesfull\r\nRunning test suite...\r\nAssertion failed in 'temperatureRange' on line 68\r\nTests run: 3 Successful: 2 Failed: 1\r\n\r\n=============================================================\r\nSummary: \r\nFailed tests:\r\n 1. My_Module/examples/TestSuite/\r\n\r\nPassed tests:\r\n 1. DistanceSensor/examples/GP2Y0A21YK/TestSuite/\r\n=============================================================\r\n````\r\n","google":"UA-37264563-3","tagline":"Python Script to automate Arduino Unit Tests"}